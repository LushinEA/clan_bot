const { Collection, MessageFlags } = require('discord.js');
const embeds = require('../components/embeds/clanCreationEmbeds');
const modals = require('../components/modals/clanCreationModals');
const { getClansCollection } = require('../utils/database');
const { handleInteractionError } = require('../utils/errorHandler');
const config = require('../config');
const { updateInsigniaPanel } = require('./insigniaManager');
const { findUserClan, validateUniqueness, validateRosterMembers } = require('../utils/validationHelper');
const logger = require('../utils/logger');

const registrationSessions = new Map();

async function start(interaction) {
    const userId = interaction.user.id;
    logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${userId}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞.`);

    // --- –ü–†–û–í–ï–†–ö–ê: –°–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–ª–∞–Ω–µ ---
    const userClan = await findUserClan({ discordId: userId });
    if (userClan) {
        logger.warn(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ "${userClan.tag}", –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
        await interaction.reply({
            content: `üõ°Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ **\`${userClan.tag}\` ${userClan.name}**.`,
            flags: [MessageFlags.Ephemeral]
        });
        return;
    }
    // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

    if (registrationSessions.has(userId)) {
        await interaction.reply({ content: '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞.', flags: [MessageFlags.Ephemeral] });
        return;
    }
    registrationSessions.set(userId, { step: 1, data: {}, isEditing: false });
    const reply = embeds.createStep1Embed(interaction);
    await interaction.reply({ ...reply, flags: [MessageFlags.Ephemeral] });
}

async function handleButton(interaction) {
    const userId = interaction.user.id;
    const session = registrationSessions.get(userId);
    
    if (!session && !['clan_create_start'].includes(interaction.customId)) {
        await interaction.reply({ content: '‚è≥ –í–∞—à–∞ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', flags: [MessageFlags.Ephemeral] });
        return;
    }
    try {
        switch (interaction.customId) {
            case 'clan_create_start':
                await start(interaction);
                break;
            case 'clan_create_step1_button':
                await interaction.showModal(modals.createBasicInfoModal(session.data));
                break;
            case 'clan_create_step2_button':
                await interaction.showModal(modals.createLeaderInfoModal(session.data));
                break;
            case 'clan_create_step3_button':
                await interaction.showModal(modals.createRosterModal(session.data));
                break;
            case 'clan_create_confirm':
                await submitAndCreateClan(interaction, session);
                registrationSessions.delete(userId);
                break;
            case 'clan_create_edit':
                session.isEditing = true;
                await interaction.showModal(modals.createBasicInfoModal(session.data));
                break;
            case 'clan_create_cancel':
                logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∞–Ω–∞.`);
                registrationSessions.delete(userId);
                await interaction.update({ content: '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', embeds: [], components: [] });
                break;
        }
    } catch (error) {
        await handleInteractionError(error, interaction, `handleButton: ${interaction.customId}`);
    }
}

async function handleModalSubmit(interaction) {
    const userId = interaction.user.id;
    const session = registrationSessions.get(userId);
    if (!session) { return; }

    try {
        await interaction.deferUpdate();
        
        switch (interaction.customId) {
            case 'clan_create_step1_modal': {
                const tag = interaction.fields.getTextInputValue('clan_tag');
                const name = interaction.fields.getTextInputValue('clan_name');
                const color = interaction.fields.getTextInputValue('clan_color');
                const server = interaction.fields.getTextInputValue('clan_server');

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                session.data.tag = tag;
                session.data.name = name;
                session.data.color = '#' + color.toUpperCase();
                session.data.server = server;
                logger.debug(`[Creation] Step 1 data from ${interaction.user.tag}: ${JSON.stringify(session.data)}`);

                // --- –í–ê–õ–ò–î–ê–¶–ò–Ø ---
                const hexRegex = /^[0-9A-F]{6}$/i;
                if (!hexRegex.test(color)) {
                    await interaction.followUp({ 
                        content: '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX-–∫–æ–¥–∞ —Ü–≤–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç 0-9 –∏ A-F (–Ω–∞–ø—Ä–∏–º–µ—Ä, `FF5733`). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" –µ—â–µ —Ä–∞–∑.', 
                        flags: [MessageFlags.Ephemeral] 
                    });
                    return;
                }

                if (!Object.keys(config.SERVERS).includes(server)) {
                    await interaction.followUp({ 
                        content: '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞. –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" –µ—â–µ —Ä–∞–∑.', 
                        flags: [MessageFlags.Ephemeral] 
                    });
                    return;
                }

                // --- –ü–†–û–í–ï–†–ö–ê: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–∞, –∏–º–µ–Ω–∏ –∏ —Ü–≤–µ—Ç–∞ ---
                const uniquenessCheck = await validateUniqueness({ tag, name, color: '#' + color.toUpperCase() });
                if (!uniquenessCheck.isValid) {
                    await interaction.followUp({ content: uniquenessCheck.message, flags: [MessageFlags.Ephemeral] });
                    return;
                }
                // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---
                
                if (session.isEditing) {
                    session.step = 2;
                    await interaction.editReply(embeds.createStep2Embed(interaction, session.data));
                } else {
                    session.step = 2;
                    await interaction.editReply(embeds.createStep2Embed(interaction, session.data));
                }
                break;
            }
            case 'clan_create_step2_modal': {
                const leaderNick = interaction.fields.getTextInputValue('leader_nick');
                const leaderSteamId = interaction.fields.getTextInputValue('leader_steamid');
                const leaderDiscordId = interaction.user.id;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                session.data.leader_nick = leaderNick;
                session.data.leader_steamid = leaderSteamId;
                session.data.leader_discordid = leaderDiscordId;
                logger.debug(`[Creation] Step 2 data from ${interaction.user.tag}: nick=${leaderNick}, steamid=${leaderSteamId}`);

                // --- –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–ê–¢–ê SteamID64 ---
                const steamIdRegex = /^\d{17}$/;
                if (!steamIdRegex.test(leaderSteamId)) {
                     await interaction.followUp({ 
                        content: '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SteamID64. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 17 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≤—ã" –µ—â–µ —Ä–∞–∑.', 
                        flags: [MessageFlags.Ephemeral] 
                    });
                    return;
                }

                // --- –ü–†–û–í–ï–†–ö–ê: –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ SteamID –∏–ª–∏ Discord ID –≥–ª–∞–≤—ã –≤ –¥—Ä—É–≥–æ–º –∫–ª–∞–Ω–µ ---
                const existingLeaderClan = await findUserClan({ discordId: leaderDiscordId, steamId: leaderSteamId });
                if (existingLeaderClan) {
                    await interaction.followUp({
                        content: `‚ùå **–û—à–∏–±–∫–∞!** –í–∞—à Discord ID (<@${leaderDiscordId}>) –∏–ª–∏ SteamID (\`${leaderSteamId}\`) —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–ª–∞–Ω–µ **\`${existingLeaderClan.tag}\` ${existingLeaderClan.name}**. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞–Ω, –≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â–∏–π.`,
                        flags: [MessageFlags.Ephemeral]
                    });
                    return;
                }
                // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

                if (session.isEditing) {
                    session.step = 3;
                    await interaction.editReply(embeds.createStep3Embed(interaction, session.data));
                } else {
                    session.step = 3;
                    await interaction.editReply(embeds.createStep3Embed(interaction, session.data));
                }
                break;
            }
            case 'clan_create_step3_modal': {
                const roster = interaction.fields.getTextInputValue('clan_roster');
                session.data.roster = roster;

                // --- –ü–†–û–í–ï–†–ö–ê: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ---
                const MINIMUM_MEMBERS = 5;
                const rosterMemberCount = roster.split('\n').filter(line => line.trim() !== '').length;
                const totalMemberCount = 1 + rosterMemberCount; // +1 —ç—Ç–æ —Å–∞–º –ª–∏–¥–µ—Ä

                if (totalMemberCount < MINIMUM_MEMBERS) {
                    await interaction.followUp({
                        content: `‚ùå **–û—à–∏–±–∫–∞!** –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–ª–∞–Ω–∞ ‚Äî **${MINIMUM_MEMBERS}** —á–µ–ª–æ–≤–µ–∫ (–≤–∫–ª—é—á–∞—è –≤–∞—Å –∫–∞–∫ –≥–ª–∞–≤—É).\n\n–í –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ —Å–µ–π—á–∞—Å —É–∫–∞–∑–∞–Ω–æ **${totalMemberCount}**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤" –µ—â—ë —Ä–∞–∑.`,
                        flags: [MessageFlags.Ephemeral]
                    });
                    return;
                }
                // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

                logger.debug(`[Creation] Step 3 data (roster) from ${interaction.user.tag}: ${roster.split('\n').length} entries.`);

                // --- –£–°–ò–õ–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–ê–¢–ê –°–û–°–¢–ê–í–ê ---
                const lines = roster.split('\n').filter(line => line.trim() !== '');
                const steamIdRegex = /^\d{17}$/;
                const discordIdRegex = /^\d{17,19}$/;
                const seenSteamIds = new Set();
                const seenDiscordIds = new Set();

                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    const parts = line.split(',').map(p => p.trim());

                    if (parts.length !== 3) {
                        await interaction.followUp({ 
                            content: `‚ùå **–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:** \`${line}\`\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: \`–ù–∏–∫–Ω–µ–π–º, SteamID, DiscordID\`. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`, 
                            flags: [MessageFlags.Ephemeral] 
                        });
                        return;
                    }

                    const [, steamId, discordId] = parts;

                    if (!steamIdRegex.test(steamId)) {
                        await interaction.followUp({ 
                            content: `‚ùå **–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:** \`${line}\`\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SteamID \`${steamId}\`. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 17 —Ü–∏—Ñ—Ä.`, 
                            flags: [MessageFlags.Ephemeral] 
                        });
                        return;
                    }

                    if (!discordIdRegex.test(discordId)) {
                         await interaction.followUp({ 
                            content: `‚ùå **–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}:** \`${line}\`\n–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Discord ID \`${discordId}\`. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`, 
                            flags: [MessageFlags.Ephemeral] 
                        });
                        return;
                    }

                    // --- –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´ –í–ù–£–¢–†–ò –°–ü–ò–°–ö–ê ---
                    if (seenSteamIds.has(steamId)) {
                        await interaction.followUp({
                            content: `‚ùå **–û—à–∏–±–∫–∞!** –î—É–±–ª–∏–∫–∞—Ç –≤ —Å–ø–∏—Å–∫–µ. SteamID \`${steamId}\` –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏.`,
                            flags: [MessageFlags.Ephemeral]
                        });
                        return;
                    }
                    seenSteamIds.add(steamId);

                    if (seenDiscordIds.has(discordId)) {
                        await interaction.followUp({
                            content: `‚ùå **–û—à–∏–±–∫–∞!** –î—É–±–ª–∏–∫–∞—Ç –≤ —Å–ø–∏—Å–∫–µ. Discord ID \`${discordId}\` (<@${discordId}>) –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏.`,
                            flags: [MessageFlags.Ephemeral]
                        });
                        return;
                    }
                    seenDiscordIds.add(discordId);
                    // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ù–ê –î–£–ë–õ–ò–ö–ê–¢–´ ---
                }
                
                // --- –ü–†–û–í–ï–†–ö–ê: –ß–ª–µ–Ω—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –∫–ª–∞–Ω–∞—Ö ---
                const rosterCheck = await validateRosterMembers(roster);
                if (!rosterCheck.isValid) {
                    await interaction.followUp({ content: rosterCheck.message, flags: [MessageFlags.Ephemeral] });
                    return;
                }
                // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

                if (session.isEditing) {
                    session.isEditing = false;
                    await interaction.editReply(embeds.createFinalConfirmationEmbed(interaction, session));
                } else {
                    session.step = 4;
                    await askForEmblem(interaction, session);
                }
                break;
            }
        }
    } catch (error) {
        await handleInteractionError(error, interaction, `handleModalSubmit: ${interaction.customId}`);
    }
}

async function askForEmblem(interaction, session) {
    await interaction.editReply(embeds.createEmblemRequestEmbed(interaction, session.data));
    
    const filter = (i) => ['clan_emblem_skip', 'clan_create_cancel'].includes(i.customId) && i.user.id === interaction.user.id;
    const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000, max: 1 });
    
    const messageFilter = (m) => m.author.id === interaction.user.id && m.attachments.size > 0;
    const messageCollector = interaction.channel.createMessageCollector({ filter: messageFilter, time: 60000, max: 1 });

    collector.on('collect', async i => {
        if (i.customId === 'clan_create_cancel') {
             messageCollector.stop('cancel');
             logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —à–∞–≥–µ —ç–º–±–ª–µ–º—ã.`);
             registrationSessions.delete(interaction.user.id);
             await i.update({ content: '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', embeds: [], components: [] });
             return;
        }
        logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–±–ª–µ–º—ã.`);
        session.data.emblem = null;
        messageCollector.stop();
        await i.update({ ...embeds.createFinalConfirmationEmbed(i, session) });
    });

    messageCollector.on('collect', async m => {
        const attachment = m.attachments.first();
        if (attachment && attachment.contentType?.startsWith('image')) {
            session.data.emblem = attachment.url;
            logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –∑–∞–≥—Ä—É–∑–∏–ª —ç–º–±–ª–µ–º—É: ${attachment.url}`);
            collector.stop();
            await interaction.editReply({ ...embeds.createFinalConfirmationEmbed(interaction, session) });
            await m.delete().catch(() => {});
        }
    });

    collector.on('end', async (collected, reason) => {
        if (reason === 'cancel') return;
        if (reason === 'time' && messageCollector.collected.size === 0) {
            logger.info(`[Creation] –í—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —ç–º–±–ª–µ–º—ã –¥–ª—è ${interaction.user.tag} –∏—Å—Ç–µ–∫–ª–æ. –≠–º–±–ª–µ–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.`);
            session.data.emblem = null;
            await interaction.editReply({ ...embeds.createFinalConfirmationEmbed(interaction, session) });
        }
    });
}

async function submitAndCreateClan(interaction, session) {
    await interaction.deferUpdate({ flags: [MessageFlags.Ephemeral] });
    let newRole;
    const user = interaction.user;
    logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tag} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–Ω–∞. –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(session.data)}`);

    try {
        newRole = await interaction.guild.roles.create({
            name: session.data.tag,
            color: session.data.color,
            mentionable: false,
            hoist: true, 
            reason: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞–Ω–∞ ${session.data.name}`
        });
        logger.info(`[Creation] –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "${newRole.name}" (ID: ${newRole.id}) –¥–ª—è –∫–ª–∞–Ω–∞ ${session.data.tag}.`);
    } catch (error) {
        logger.error(`[Creation] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ –¥–ª—è –∫–ª–∞–Ω–∞ ${session.data.tag} –æ—Ç ${user.tag}:`, error);
        await interaction.editReply({ content: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HEX-–∫–æ–¥–∞.', embeds: [], components: [] });
        return;
    }

    // --- –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é –î–û —Å–æ–∑–¥–∞–Ω–∏—è embed'–æ–≤ ---
    session.data.roleId = newRole.id;
    session.data.createdAt = new Date();

    // --- –õ–æ–≥–∏–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π ---
    try {
        const leaderRole = await interaction.guild.roles.fetch(config.ROLES.CLAN_LEADER_ID);
        if (leaderRole) {
            await interaction.member.roles.add(leaderRole);
        } else {
            logger.warn(`[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –†–æ–ª—å –ª–∏–¥–µ—Ä–∞ –∫–ª–∞–Ω–∞ —Å ID ${config.ROLES.CLAN_LEADER_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        }
    } catch (error) {
        logger.warn(`[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –ª–∏–¥–µ—Ä–∞ –∫–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${interaction.user.tag}.`, error);
    }
    
    const memberIds = new Set([interaction.user.id]);
    if (session.data.roster) {
        const rosterLines = session.data.roster.split('\n').filter(l => l.trim());
        for (const line of rosterLines) {
            const parts = line.split(',').map(p => p.trim());
            const discordId = parts[2];
            if (discordId && /^\d{17,19}$/.test(discordId)) {
                memberIds.add(discordId);
            }
        }
    }

    let successCount = 0;
    let failCount = 0;
    const rolePromises = [];

    for (const id of memberIds) {
        rolePromises.push(
            interaction.guild.members.fetch(id)
                .then(member => member.roles.add(newRole))
                .then(() => successCount++)
                .catch(() => failCount++)
        );
    }
    await Promise.allSettled(rolePromises);
    logger.info(`[Creation] –†–æ–ª—å "${newRole.name}" –≤—ã–¥–∞–Ω–∞ ${successCount} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º. –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${failCount}.`);

    let logMessageId = null;
    let registryMessageId = null;

    const reviewChannelId = config.REVIEW_CHANNEL_ID;
    if (reviewChannelId) {
        try {
            const reviewChannel = await interaction.guild.channels.fetch(reviewChannelId);
            const logMessage = await reviewChannel.send(embeds.createLogEmbed(interaction.user, session.data, newRole));
            logMessageId = logMessage.id;
        } catch (error) { 
            logger.error(`!! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ –∫–∞–Ω–∞–ª (ID: ${reviewChannelId}).`, error); 
        }
    }
    
    const registryChannelId = config.CHANNELS.CLAN_REGISTRY;
    if (registryChannelId) {
        try {
            const registryChannel = await interaction.guild.channels.fetch(registryChannelId);
            const registryEmbed = embeds.createRegistryEmbed(session.data);
            const registryMessage = await registryChannel.send({ embeds: [registryEmbed] });
            registryMessageId = registryMessage.id;
        } catch (error) {
            logger.error(`!! –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä –∫–ª–∞–Ω–æ–≤ (ID: ${registryChannelId}).`, error);
        }
    }
    
    const clansCollection = getClansCollection();
    const clanData = { 
        ...session.data, 
        status: 'approved', 
        creatorId: interaction.user.id, 
        creatorTag: interaction.user.tag, 
        guildId: interaction.guild.id, 
        logMessageId: logMessageId,
        registryMessageId: registryMessageId,
    };
    await clansCollection.insertOne(clanData);
    logger.info(`[Creation] –ö–ª–∞–Ω "${session.data.name}" (${session.data.tag}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.`);
    
    await updateInsigniaPanel(interaction.client);
    
    await interaction.editReply({ ...embeds.createSuccessEmbed(interaction, session.data, newRole), flags: [MessageFlags.Ephemeral] });
    logger.info(`[Creation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tag} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∞–Ω–∞ "${session.data.name}".`);
}

module.exports = {
    handleButton,
    handleModalSubmit,
};