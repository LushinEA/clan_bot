const { MessageFlags } = require('discord.js');
const { getClansCollection } = require('../utils/database');
const { handleInteractionError } = require('../utils/errorHandler');
const modals = require('../components/modals/insigniaModals');
const embeds = require('../components/embeds/clanCreationEmbeds');
const config = require('../config');

async function handleSelect(interaction) {
    const clanRoleId = interaction.values[0];
    const clansCollection = getClansCollection();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ä–æ–ª—å –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–ª–∞–Ω–∞
    const allClans = await clansCollection.find({ guildId: interaction.guildId }).toArray();
    const userClanRoles = allClans.filter(clan => interaction.member.roles.cache.has(clan.roleId));

    if (userClanRoles.length > 0) {
        const existingClan = userClanRoles[0];
        await interaction.reply({
            content: `üõ°Ô∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ **\`${existingClan.tag}\` ${existingClan.name}**. –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∞–Ω—É, –Ω–µ –ø–æ–∫–∏–Ω—É–≤ —Ç–µ–∫—É—â–∏–π.`,
            flags: [MessageFlags.Ephemeral]
        });
        return;
    }
    
    await interaction.showModal(modals.createInsigniaModal(clanRoleId));
}

async function handleModal(interaction) {
    await interaction.deferReply({ ephemeral: true });

    try {
        const clanRoleId = interaction.customId.split('_').pop();
        const nick = interaction.fields.getTextInputValue('insignia_nick');
        const steamId = interaction.fields.getTextInputValue('insignia_steamid');
        const discordId = interaction.user.id;

        // --- –í–ê–õ–ò–î–ê–¶–ò–Ø ---
        const steamIdRegex = /^\d{17}$/;
        if (!steamIdRegex.test(steamId)) {
            await interaction.editReply({
                content: '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SteamID64. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 17 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            });
            return;
        }

        const clansCollection = getClansCollection();
        const clan = await clansCollection.findOne({ roleId: clanRoleId, guildId: interaction.guildId });

        if (!clan) {
            await interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
            return;
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤
        const newRosterEntry = `${nick}, ${steamId}, ${discordId}`;
        const updatedRoster = clan.roster ? `${clan.roster}\n${newRosterEntry}` : newRosterEntry;
        
        await clansCollection.updateOne(
            { _id: clan._id },
            { $set: { roster: updatedRoster } }
        );

        // –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏
        const role = await interaction.guild.roles.fetch(clanRoleId);
        if (role) {
            await interaction.member.roles.add(role);
        } else {
             throw new Error(`–†–æ–ª—å —Å ID ${clanRoleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        const updatedClanData = await clansCollection.findOne({ _id: clan._id });
        await updateClanMessages(interaction.client, updatedClanData);

        await interaction.editReply({
            content: `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–ª–∞–Ω **\`${clan.tag}\` ${clan.name}** –∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å <@&${clan.roleId}>.`
        });

    } catch (error) {
        await handleInteractionError(error, interaction, 'insigniaManager.handleModal');
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∏ –ª–æ–≥–∞—Ö
 * @param {import('discord.js').Client} client 
 * @param {object} clanData 
 */
async function updateClanMessages(client, clanData) {
    // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∫–ª–∞–Ω–æ–≤
    if (clanData.registryMessageId && config.CHANNELS.CLAN_REGISTRY) {
        try {
            const channel = await client.channels.fetch(config.CHANNELS.CLAN_REGISTRY);
            const message = await channel.messages.fetch(clanData.registryMessageId);
            const newEmbed = embeds.createRegistryEmbed(clanData);
            await message.edit({ embeds: [newEmbed] });
        } catch (error) {
            console.error(`[Insignia] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è –∫–ª–∞–Ω–∞ ${clanData.tag}:`, error);
        }
    }

    // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (clanData.logMessageId && config.REVIEW_CHANNEL_ID) {
         try {
            const channel = await client.channels.fetch(config.REVIEW_CHANNEL_ID);
            const message = await channel.messages.fetch(clanData.logMessageId);
            
            const author = { tag: clanData.creatorTag, iconURL: null }; 
            const role = { id: clanData.roleId };
            
            const newLogEmbed = embeds.createLogEmbed(author, clanData, role);
            await message.edit({ embeds: newLogEmbed.embeds });
        } catch (error) {
            console.error(`[Insignia] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞–Ω–∞ ${clanData.tag}:`, error);
        }
    }
}

module.exports = {
    handleSelect,
    handleModal,
};