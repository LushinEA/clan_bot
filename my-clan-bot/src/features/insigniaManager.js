const { MessageFlags } = require('discord.js');
const { getClansCollection } = require('../utils/database');
const { handleInteractionError } = require('../utils/errorHandler');
const modals = require('../components/modals/insigniaModals');
const embeds = require('../components/embeds/clanCreationEmbeds');
const insigniaEmbeds = require('../components/embeds/insigniaEmbeds');
const config = require('../config');
const { getState } = require('../utils/stateManager');
const { findUserClan } = require('../utils/validationHelper');
const logger = require('../utils/logger');
const { addClanTag, removeClanTag } = require('../utils/nicknameManager');

async function handleSelect(interaction) {
    const clanRoleId = interaction.values[0];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–∞-–∑–∞–≥–ª—É—à–∫–∏
    if (clanRoleId === 'insignia_reset_selection') {
        await interaction.reply({ content: '–í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω.', flags: [MessageFlags.Ephemeral] });
        return;
    }

    const clansCollection = getClansCollection();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ä–æ–ª—å –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –∫–ª–∞–Ω–∞
    const allClans = await clansCollection.find({ guildId: interaction.guildId }).toArray();
    const userClanRoles = allClans.filter(clan => interaction.member.roles.cache.has(clan.roleId));

    if (userClanRoles.length > 0) {
        const existingClan = userClanRoles[0];
        logger.warn(`[Insignia] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω (RoleID: ${clanRoleId}), —Å–æ—Å—Ç–æ—è —É–∂–µ –≤ –∫–ª–∞–Ω–µ "${existingClan.tag}".`);
        await interaction.reply({
            content: `üõ°Ô∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ **\`${existingClan.tag}\` ${existingClan.name}**. –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–º—É –∫–ª–∞–Ω—É, –Ω–µ –ø–æ–∫–∏–Ω—É–≤ —Ç–µ–∫—É—â–∏–π.`,
            flags: [MessageFlags.Ephemeral]
        });
        return;
    }
    
    await interaction.showModal(modals.createInsigniaModal(clanRoleId));
}

async function handleModal(interaction) {
    await interaction.deferReply({ ephemeral: true });
    const user = interaction.user;

    try {
        const clanRoleId = interaction.customId.split('_').pop();
        const nick = interaction.fields.getTextInputValue('insignia_nick');
        const steamId = interaction.fields.getTextInputValue('insignia_steamid');
        const discordId = interaction.user.id;

        // --- –í–ê–õ–ò–î–ê–¶–ò–Ø ---
        const steamIdRegex = /^\d{17}$/;
        if (!steamIdRegex.test(steamId)) {
            await interaction.editReply({ content: '‚ùå **–û—à–∏–±–∫–∞!** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SteamID64. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 17 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' });
            return;
        }

        // --- –ü–†–û–í–ï–†–ö–ê: –°–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ Discord ID –∏–ª–∏ SteamID) —É–∂–µ –≤ –∫–ª–∞–Ω–µ ---
        const existingClan = await findUserClan({ discordId, steamId });
        if (existingClan) {
            await interaction.editReply({ content: `‚ùå **–û—à–∏–±–∫–∞!** –í—ã (–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º SteamID: \`${steamId}\`) —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ **\`${existingClan.tag}\` ${existingClan.name}**.` });
            return;
        }
        // --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

        const clansCollection = getClansCollection();
        const clan = await clansCollection.findOne({ roleId: clanRoleId, guildId: interaction.guildId });

        if (!clan) {
            logger.warn(`[Insignia] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tag} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞–Ω —Å RoleID: ${clanRoleId}.`);
            await interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.' });
            return;
        }
        
        logger.info(`[Insignia] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.tag} (${discordId}) –≤—Å—Ç—É–ø–∞–µ—Ç –≤ –∫–ª–∞–Ω "${clan.tag}" —Å –Ω–∏–∫–æ–º "${nick}" –∏ SteamID "${steamId}".`);
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤
        const newRosterEntry = `${nick}, ${steamId}, ${discordId}`;
        const updatedRoster = clan.roster ? `${clan.roster}\n${newRosterEntry}` : newRosterEntry;
        
        await clansCollection.updateOne({ _id: clan._id }, { $set: { roster: updatedRoster } });

        // –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏
        const role = await interaction.guild.roles.fetch(clanRoleId);
        if (role) {
            await interaction.member.roles.add(role);
            await addClanTag(interaction.member, clan.tag);
        } else {
             throw new Error(`–†–æ–ª—å —Å ID ${clanRoleId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        const updatedClanData = await clansCollection.findOne({ _id: clan._id });
        await updateClanMessages(interaction.client, updatedClanData);

        await interaction.editReply({ content: `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–ª–∞–Ω **\`${clan.tag}\` ${clan.name}** –∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–ª—å <@&${clan.roleId}>.` });

    } catch (error) {
        await handleInteractionError(error, interaction, 'insigniaManager.handleModal');
    }
}

async function handleLeave(interaction) {
    await interaction.deferReply({ ephemeral: true });

    try {
        const clansCollection = getClansCollection();
        const allClans = await clansCollection.find({ guildId: interaction.guildId }).toArray();
        const userClan = allClans.find(clan => interaction.member.roles.cache.has(clan.roleId));

        if (!userClan) {
            await interaction.editReply({ content: 'üõ°Ô∏è –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ.' });
            return;
        }

        if (userClan.creatorId === interaction.user.id) {
            await handleLeaderLeave(interaction, userClan, clansCollection);
        } else {
            await handleMemberLeave(interaction, userClan, clansCollection);
        }

    } catch (error) {
        await handleInteractionError(error, interaction, 'insigniaManager.handleLeave');
    }
}

async function handleMemberLeave(interaction, clan, collection) {
    const user = interaction.user;
    logger.info(`[Insignia] –£—á–∞—Å—Ç–Ω–∏–∫ ${user.tag} –ø–æ–∫–∏–¥–∞–µ—Ç –∫–ª–∞–Ω "${clan.tag}".`);

    const updatedRoster = clan.roster.split('\n').filter(line => !line.includes(interaction.user.id)).join('\n');
    
    await collection.updateOne({ _id: clan._id }, { $set: { roster: updatedRoster } });
    await interaction.member.roles.remove(clan.roleId).catch(e => logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Ä–æ–ª—å ${clan.roleId} —Å ${interaction.user.tag}`, e));
    await removeClanTag(interaction.member);

    const updatedClanData = await collection.findOne({ _id: clan._id });
    await updateClanMessages(interaction.client, updatedClanData);

    await interaction.editReply({ content: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω **\`${clan.tag}\` ${clan.name}**.` });
}

async function handleLeaderLeave(interaction, clan, collection) {
    const user = interaction.user;
    logger.warn(`[Insignia] –õ–ò–î–ï–† ${user.tag} –ø–æ–∫–∏–¥–∞–µ—Ç –∫–ª–∞–Ω "${clan.tag}". –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –∏–ª–∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.`);
    const rosterLines = clan.roster ? clan.roster.split('\n').filter(l => l.trim()) : [];
    let newLeaderMember = null;
    let newLeaderData = {};
    let newLeaderIndex = -1;

    // –ò—â–µ–º –ø—Ä–µ–µ–º–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    for (let i = 0; i < rosterLines.length; i++) {
        const line = rosterLines[i];
        const parts = line.split(',').map(p => p.trim());
        if (parts.length < 3) continue;
        const discordId = parts[2];
        const potentialMember = await interaction.guild.members.fetch(discordId).catch(() => null);
        if (potentialMember) {
            newLeaderMember = potentialMember;
            newLeaderData = { nick: parts[0], steamId: parts[1], discordId: parts[2] };
            newLeaderIndex = i;
            break;
        }
    }

    // --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü—Ä–µ–µ–º–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (—Ä–æ—Å—Ç–µ—Ä –ø—É—Å—Ç –∏–ª–∏ –≤—Å–µ –∏–∑ —Ä–æ—Å—Ç–µ—Ä–∞ –≤—ã—à–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞). –ö–ª–∞–Ω —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è. ---
    if (!newLeaderMember) {
        logger.warn(`[Insignia] –ü—Ä–µ–µ–º–Ω–∏–∫ –¥–ª—è –∫–ª–∞–Ω–∞ "${clan.tag}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–ª–∞–Ω —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ —É—Ö–æ–¥–∞ –ª–∏–¥–µ—Ä–∞ ${user.tag}.`);
        await removeClanTag(interaction.member);
        await interaction.guild.roles.delete(clan.roleId).catch(e => logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∫–ª–∞–Ω–∞ ${clan.tag}`, e));
        if (clan.registryMessageId) {
            const registryChannel = await interaction.client.channels.fetch(config.CHANNELS.CLAN_REGISTRY).catch(() => null);
            if (registryChannel) await registryChannel.messages.delete(clan.registryMessageId).catch(() => {});
        }
        if (clan.logMessageId) {
            const logChannel = await interaction.client.channels.fetch(config.REVIEW_CHANNEL_ID).catch(() => null);
            if (logChannel) await logChannel.messages.delete(clan.logMessageId).catch(() => {});
        }
        await collection.deleteOne({ _id: clan._id });
        await interaction.member.roles.remove(config.ROLES.CLAN_LEADER_ID).catch(() => {});
        
        await updateInsigniaPanel(interaction.client);

        await interaction.editReply({ content: `‚úÖ –í—ã –±—ã–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º. –ö–ª–∞–Ω **\`${clan.tag}\` ${clan.name}** –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.` });
        return;
    }

    // --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü—Ä–µ–µ–º–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–µ—Ä—Å—Ç–≤–æ. ---
    logger.warn(`[Insignia] –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –≤ –∫–ª–∞–Ω–µ "${clan.tag}" –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Ç ${user.tag} –∫ ${newLeaderMember.user.tag} (${newLeaderMember.id}).`);
    rosterLines.splice(newLeaderIndex, 1);
    const updatedClanDBData = {
        roster: rosterLines.join('\n'),
        creatorId: newLeaderMember.id,
        creatorTag: newLeaderMember.user.tag,
        leader_discordid: newLeaderMember.id,
        leader_nick: newLeaderData.nick,
        leader_steamid: newLeaderData.steamId,
    };
    await collection.updateOne({ _id: clan._id }, { $set: updatedClanDBData });

    await removeClanTag(interaction.member);
    // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏
    await interaction.member.roles.remove(clan.roleId).catch(() => {});
    await interaction.member.roles.remove(config.ROLES.CLAN_LEADER_ID).catch(() => {});
    await newLeaderMember.roles.add(config.ROLES.CLAN_LEADER_ID).catch(() => {});
    const finalClanData = await collection.findOne({ _id: clan._id });
    await updateClanMessages(interaction.client, finalClanData);
    await interaction.editReply({ content: `‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω. –õ–∏–¥–µ—Ä—Å—Ç–≤–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ <@${newLeaderMember.id}>.` });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∏ –ª–æ–≥–∞—Ö
 * @param {import('discord.js').Client} client 
 * @param {object} clanData 
 */
async function updateClanMessages(client, clanData) {
    if (!clanData) return;
    // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ –∫–ª–∞–Ω–æ–≤
    if (clanData.registryMessageId && config.CHANNELS.CLAN_REGISTRY) {
        try {
            const channel = await client.channels.fetch(config.CHANNELS.CLAN_REGISTRY);
            const message = await channel.messages.fetch(clanData.registryMessageId);
            const newEmbed = embeds.createRegistryEmbed(clanData);
            await message.edit({ embeds: [newEmbed] });
        } catch (error) {
            logger.error(`[Insignia] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è –∫–ª–∞–Ω–∞ ${clanData.tag}:`, error);
        }
    }

    // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (clanData.logMessageId && config.REVIEW_CHANNEL_ID) {
         try {
            const channel = await client.channels.fetch(config.REVIEW_CHANNEL_ID);
            const message = await channel.messages.fetch(clanData.logMessageId);
            const author = { tag: clanData.creatorTag, iconURL: null }; 
            const role = { id: clanData.roleId };
            const newLogEmbed = embeds.createLogEmbed(author, clanData, role);
            await message.edit({ embeds: newLogEmbed.embeds });
        } catch (error) {
            logger.error(`[Insignia] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞–Ω–∞ ${clanData.tag}:`, error);
        }
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—à–∏–≤–æ–∫
 * @param {import('discord.js').Client} client 
 */
async function updateInsigniaPanel(client) {
    logger.info('–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞—à–∏–≤–æ–∫...');
    try {
        const state = await getState();
        const panelConfig = state.insigniaPanel;

        if (!panelConfig || !panelConfig.channelId || !panelConfig.messageId) {
            logger.warn('[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—à–∏–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ bot_state.json. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !insignia-setup.');
            return;
        }

        const channel = await client.channels.fetch(panelConfig.channelId).catch(() => null);
        if (!channel) {
             logger.error(`[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—à–∏–≤–æ–∫ —Å ID: ${panelConfig.channelId}`);
             return;
        }

        const message = await channel.messages.fetch(panelConfig.messageId).catch(() => null);
        if (!message) {
            logger.error(`[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –Ω–∞—à–∏–≤–æ–∫ —Å ID: ${panelConfig.messageId}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !insignia-setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ.`);
            return;
        }

        const clansCollection = getClansCollection();
        const clans = await clansCollection.find({ status: 'approved' }).sort({ tag: 1 }).toArray();

        const newPanelData = insigniaEmbeds.createInsigniaEmbed(clans);
        await message.edit(newPanelData);
        
        logger.info('–ü–∞–Ω–µ–ª—å –Ω–∞—à–∏–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
    } catch (error) {
        logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—à–∏–≤–æ–∫:', error);
    }
}

module.exports = {
    handleSelect,
    handleModal,
    handleLeave,
    updateInsigniaPanel,
    updateClanMessages,
};